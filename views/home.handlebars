<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Single page coffee machine app</title>
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    
    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <link rel="stylesheet"   href="styles.css">
</head>
<body>
    <div id="root"></div>
    <script type="text/babel">

        const CoffeeMachines = (props) => {
            const machineList = props.data.map((machine) => {
                return (
                    <li key={machine._id} onClick={props.clickHandler}>
                        {machine.name}
                    </li>
                );
            });            
            return (
                <>
                    <h2>Coffee Machine List</h2>
                    <ul>{machineList}</ul>
                </>
            );
        }

        const CoffeeMachineDetail = (props) => { 
            let stringifiedFeature = '';
            if (props.machine?.feature) {
                stringifiedFeature = props.machine.feature.toString();
            }
            return (
                <div>
                    <h2>Machine Details</h2>
                        <form>
                            Name: <input type="text" name="name" value={props.machine.name || ""} onChange={props.handleChange} /><br/>
                            Manufacturer: <input type="text" name="manufacturer" value={props.machine.manufacturer || ""} onChange={props.handleChange} /><br/>
                            Price: $ <input type="text" name="price" value={props.machine.price || ""} onChange={props.handleChange} /><br/>
                            Feature(s): <input type="text" name="feature" value={stringifiedFeature} onChange={props.handleChange} /><br/>
                        </form>
                        <button name="clear" onClick={props.clearForm}>Clear</button>&nbsp;
                        <button name="save" onClick={props.saveItem}>Save</button>&nbsp;
                        <button name="delete" onClick={props.deleteItem}>Delete</button>
                </div> 
            );
        }

        class CoffeeMachineApp extends React.Component {
            constructor(props) {
                super(props);
                this.state = { 
                    machines: {{{data}}},
                    currentMachine: {}
                };
                this.selectedMachine = this.selectedMachine.bind(this);
                this.addMachine = this.addMachine.bind(this);
                this.removeMachine = this.removeMachine.bind(this);
                this.handleChange = this.handleChange.bind(this);
                this.clearForm = this.clearForm.bind(this);
                this.saveItem = this.saveItem.bind(this);
                this.deleteItem = this.deleteItem.bind(this);
            }
            
            selectedMachine = (event) => {
                const found = this.state.machines.find((machine) => {
                    return machine.name === event.target.innerText;
                });
                this.setState({currentMachine: found});
            }

            addMachine = (newItem) => {
                const newMachines = [...this.state.machines, newItem];
                this.setState({ machines: newMachines });
            }

            removeMachine = (deletedItem) => {
                const newMachines = this.state.machines.filter(item => item._id !== deletedItem._id);
                this.setState({ machines: newMachines });
            }

            handleChange = (event) => {
                const newMachine = this.state.currentMachine;
                const propertyName = event.target.name;
                if (propertyName === 'feature') {
                    newMachine[propertyName] = event.target.value.split(',');
                } else {
                    newMachine[propertyName] = event.target.value;
                }
                this.setState({currentMachine: newMachine});                              
            }

            clearForm = () => {
                this.setState({currentMachine: {}});
            }

            // api/machines/create [POST]
            // api/machines/{machine-id}/ [PUT]

            saveItem = async () => {                
                if (this.state.currentMachine._id) {
                    return fetch(`/api/machinelist/${this.state.currentMachine._id}`, {
                                method: "PUT",
                                headers: {'Content-Type': 'application/json'},
                                body: JSON.stringify(this.state.currentMachine)
                            }); 
                   
                } else {
                    const response = await fetch(`/api/machinelist/addItem`, {
                                method: "POST",
                                headers: {'Content-Type': 'application/json'},
                                body: JSON.stringify(this.state.currentMachine)
                            });
                    const createdItem = await response.json();
                    this.addMachine(createdItem);
                }
            }

    
            deleteItem = () => {
                if (this.state.currentMachine._id) {
                    fetch(`/api/machinelist/${this.state.currentMachine._id}`, {
                        method: "DELETE"
                    })
                    .then(res => res.json())
                    .then((json) => { 
                        if (json.ok) {
                            this.removeMachine(this.state.currentMachine);
                        }
                    });
                }
            }

            render() {
                return (
                    <div>
                        <CoffeeMachines data={this.state.machines} clickHandler={this.selectedMachine} />
                        <CoffeeMachineDetail 
                            machine={this.state.currentMachine} 
                            handleChange={this.handleChange}
                            clearForm={this.clearForm}
                            saveItem={this.saveItem}
                            deleteItem={this.deleteItem}
                        />
                    </div> 
                );
            }
        }
        ReactDOM.render(<CoffeeMachineApp />, document.getElementById('root'));   
    </script>
</body>
</html>

